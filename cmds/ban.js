const database = require('../databases.js');
const { checkUserRole, getRoleName, checkIfTableExists } = require('./roles.js');

const { Keyboard } = require('vk-io')

module.exports = {
  command: '/ban',
  aliases: ['/–±–∞–Ω'],
  description: '–ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
  async execute(context) {
    const { peerId, senderId, text, replyMessage } = context;
    const senderUserRole = await checkUserRole(peerId, senderId);

    if (senderUserRole < 40) {
      return context.reply('‚ùì –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!\n‚ùì –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ä–æ–ª—å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä');
    }

    let target;
    let banDays;
    let reason;
	let numericId;
	
    if (!await checkIfTableExists(`conference_${peerId}`)) {
      console.error('–¢–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      return context.send('‚ùì –ë–µ—Å–µ–¥–∞ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞! –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –±–µ—Å–µ–¥—ã, –≤–≤–µ–¥–∏—Ç–µ /start');
    }
	
    if (replyMessage) {
      const parts = text.split(' ');
      target = replyMessage.senderId;
	  numericId = replyMessage.senderId
	  banDays = parseInt(parts[1]) || 999;
      reason = parts.slice(2).join(' ') || '–ë–µ–∑ –ø—Ä–∏—á–∏–Ω—ã';
    } else {
      const parts = text.split(' ');
      target = parts[1];
	  numericId = await extractNumericId(parts[1])
      banDays = parseInt(parts[2]) || 999;
      reason = parts.slice(3).join(' ') || '–ë–µ–∑ –ø—Ä–∏—á–∏–Ω—ã';
    }

    if (!target) {
      return context.reply(`‚ùì –ê—Ä–≥—É–º–µ–Ω—Ç—ã –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤ –¥–Ω—è—Ö.\n‚ùì –ü—Ä–∏–º–µ—Ä: /ban @id1 30 test`);
    }

    const targetUserRole = await checkUserRole(peerId, numericId);

    if (senderUserRole <= targetUserRole) {
      return context.reply('‚ùì –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!');
    }
		
    const currentDate = new Date();
    const blockUntil = new Date(currentDate.getTime() + banDays * 24 * 60 * 60 * 1000);

    const blockInfo = {
      blocked_user_id: numericId,
      blocked_by: senderId,
      block_until: blockUntil,
      reason: reason,
    };

    const selectBlockedUsersQuery = `
      SELECT blocked_users
      FROM conference_${peerId}
      WHERE user_id = ?
    `;

    database.query(selectBlockedUsersQuery, [numericId], async (error, results) => {
      if (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–∫–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
        return context.send('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–∫–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.');
      }

      const blockedUsers = results.length > 0 ? JSON.parse(results[0].blocked_users || '[]') : [];

      const existingBlockIndex = blockedUsers.findIndex(block => block.blocked_user_id === numericId);

      if (existingBlockIndex !== -1) {
        blockedUsers[existingBlockIndex] = blockInfo;
      } else {
        blockedUsers.push(blockInfo);
      }

      const updateBlockedUsersQuery = `
        INSERT INTO conference_${peerId} (user_id, blocked_users)
        VALUES (?, ?)
        ON DUPLICATE KEY UPDATE blocked_users = VALUES(blocked_users)
      `;

      database.query(updateBlockedUsersQuery, [numericId, JSON.stringify(blockedUsers)], async (error, result) => {
        if (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
          return context.send('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.');
        }
      const buttonPayload = {
        button: `${numericId}`,
        event_id: 6910,
      };

      const keyboard = Keyboard.builder()
        .callbackButton({
          label: 'üî¥ –°–Ω—è—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É',
          payload: JSON.stringify(buttonPayload),
          inline: true,
          color: Keyboard.PRIMARY_COLOR,
        })
        .inline();
      
      const blockUntilFormatted = blockUntil.toLocaleString('ru-RU', { day: 'numeric', month: 'long', year: 'numeric', hour: 'numeric', minute: 'numeric', timeZoneName: 'short' });
      context.reply({ message: `üö´ [id${numericId}|–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] –ø–æ–ª—É—á–∏–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –≤ —á–∞—Ç–µ –¥–æ ${blockUntilFormatted}.\n‚ùì –ü—Ä–∏—á–∏–Ω–∞: ${blockInfo.reason}`, keyboard: keyboard });

      const kickResult = await vk.api.messages.removeChatUser({
        chat_id: context.chatId,
        member_id: numericId,
      });
    });
  });
},
};
