const database = require('../databases.js');
const { checkUserRole, checkIfTableExists, getUserRole, getRoleName, getRoleNamezov } = require('./roles.js');

module.exports = {
  command: '/getban',
  aliases: ['/–ø–æ–ª—É—á–∏—Ç—å–±–∞–Ω'],
  description: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
  async execute(context) {
    const messageText = context.text;
    const parts = messageText.split(' ');   
    const { peerId, senderId, replyMessage, text } = context;
	console.log(text)
    const conferenceId = peerId

    if (!await checkIfTableExists(`conference_${peerId}`)) {
      console.error('–¢–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      return context.send('‚ùå –ë–µ—Å–µ–¥–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!');
    }
	
    const senderUserRole = await getUserRole(peerId, senderId);

    if (senderUserRole < 20) {
      return context.reply('‚ùå –û—Ç–∫–∞–∑–∞–Ω–æ, –≤–∞—à–∞ —Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∞—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
    }
	
    let target;
    if (replyMessage) {
      target = replyMessage.senderId; 
    } else {
      target = await await extractNumericId(parts[1]); // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∞—Ä–≥–µ—Ç–∞
    }
    if (!target) {
      context.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.');
      return;
    }
	
    try {
      const selectBlockedUsersQuery = `
        SELECT blocked_users
        FROM conference_${conferenceId}
        WHERE user_id = ?
      `;

      database.query(selectBlockedUsersQuery, [target], async (error, results) => {
        if (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–∫–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
          return context.send('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–∫–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.');
        }

		  if (results.length === 0 || !results[0].blocked_users) {
			context.reply(`[id${target}|–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.`);
			return;
		  }
		  
        const blockedUsers = results.length > 0 ? JSON.parse(results[0].blocked_users) : [];

        const userBlock = blockedUsers.find(block => block.blocked_user_id === target);

        if (userBlock) {
          const dateObj = new Date(userBlock.block_until);
          const formattedDate = dateObj.toLocaleDateString('ru-RU', { day: 'numeric', month: 'long', year: 'numeric', hour: 'numeric', minute: 'numeric', timeZoneName: 'short' });
		      let bloker = await getlink(userBlock.blocked_by)
          context.reply(`‚ùì –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ [id${userBlock.blocked_user_id}|–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]:\nüî∏ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–æ: ${formattedDate}\nüî∏ –ü—Ä–∏—á–∏–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: ${userBlock.reason}\nüî∏ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: ${bloker}`);
        } else {
          context.reply(`[id${target}|–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.`);
        }
      });
    } catch (error) {
      console.error(error);
      context.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
    }
  }
};
