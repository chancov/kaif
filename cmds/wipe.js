const database = require('../databases.js');
const { getUserRole, checkIfTableExists } = require('./roles.js');
const util = require('util');

const queryAsync = util.promisify(database.query).bind(database);

module.exports = {
  command: '/wipe',
  aliases: ['/–≤–∞–π–ø'],
  description: '–°–±—Ä–æ—Å –≤—Å–µ—Ö —Ä–æ–ª–µ–π –∏ –Ω–∏–∫–Ω–µ–π–º–æ–≤ (–∫—Ä–æ–º–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞)',
  async execute(context) {
    const { peerId, senderId } = context;
    const conferenceId = peerId;
      if (!await checkIfTableExists(`nicknames_${conferenceId}`)) {
        console.error('üõë –¢–∞–±–ª–∏—Ü–∞ –Ω–∏–∫–Ω–µ–π–º–æ–≤ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
        console.log(`nicknames_${conferenceId}`);
        return context.send('‚ùå –í–∞—à–∞ –±–µ—Å–µ–¥–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!');
      }
    const senderUserRole = await getUserRole(conferenceId, senderId);

    if (senderUserRole < 100) {
      return context.send('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Å–±—Ä–æ—Å —Ä–æ–ª–µ–π –∏ –Ω–∏–∫–Ω–µ–π–º–æ–≤.');
    }

    try {
      const resetRolesQuery = `UPDATE roles_${conferenceId} SET role_id = 0 WHERE user_id != ?`;
      await queryAsync(resetRolesQuery, [senderId]);

		const resetNicknamesQuery = `DELETE FROM nicknames_${conferenceId}`;
		await queryAsync(resetNicknamesQuery);

      await context.send('‚úÖÔ∏è –í—Å–µ —Ä–æ–ª–∏ –∏ –Ω–∏–∫–Ω–µ–π–º—ã –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã!');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –≤—Å–µ—Ö —Ä–æ–ª–µ–π –∏ –Ω–∏–∫–Ω–µ–π–º–æ–≤:', error);
      await context.send('üõë –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –≤—Å–µ—Ö —Ä–æ–ª–µ–π –∏ –Ω–∏–∫–Ω–µ–π–º–æ–≤.');
    }
  },
};
