const database = require('../databases.js');
const { checkUserRole, checkIfTableExists, getUserRole, getRoleName, getRoleNamezov } = require('./roles.js');

const util = require('util');
const databaseQuery = util.promisify(database.query);

module.exports = {
  command: '/warnlist',
  description: '–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏',
  async execute(context) {
    const { peerId } = context;
    const senderUserRole = await getUserRole(peerId, context.senderId);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if (!await checkIfTableExists(`conference_${peerId}`)) {
      console.error('–¢–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      return context.send('‚ùå –ë–µ—Å–µ–¥–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!');
    }
	
    if (senderUserRole < 20) {
      return context.reply('‚ùå –û—Ç–∫–∞–∑–∞–Ω–æ, –≤–∞—à–∞ —Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∞—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
    }

    const selectUsersInfoQuery = `
      SELECT user_id, warns
      FROM conference_${peerId}
      WHERE warns > 0
    `;
	
    try {
      const results = await databaseQuery(selectUsersInfoQuery);
      
      if (results.length === 0) {
        return context.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –∏–º–µ—é—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π.');
      }

      const userIds = results.map(nickInfo => nickInfo.user_id);
      const userInfos = await vk.api.users.get({ user_ids: userIds });

      const userMap = userInfos.reduce((acc, user) => {
        acc[user.id] = user;
        return acc;
      }, {});

      const userList = await Promise.all(results.map(async (user, index) => {
        const userInfo = userMap[user.user_id];
        return `${index + 1}. [id${user.user_id}|${userInfo.first_name} ${userInfo.last_name}] - ${user.warns}/3\n`;
      }));

      const response = `üìò –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏:\n\n${userList.join('')}`;
      context.send(response);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö:', error);
      context.send('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.');
    }
  },
};
