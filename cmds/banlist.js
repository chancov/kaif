const database = require('../databases.js');
const { checkUserRole, checkIfTableExists, getUserRole, getRoleName, getRoleNamezov } = require('./roles.js');

module.exports = {
  command: '/banlist',
  aliases: ['/—Å–ø–∏—Å–æ–∫–±–∞–Ω–æ–≤'],
  description: '–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
  async execute(context) {
    const { peerId, senderId } = context;
    const conferenceId = peerId;

    if (!await checkIfTableExists(`conference_${peerId}`)) {
      console.error('–¢–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      return context.send('‚ùì –ë–µ—Å–µ–¥–∞ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞! –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –±–µ—Å–µ–¥—ã, –≤–≤–µ–¥–∏—Ç–µ /start');
    }

    const senderUserRole = await getUserRole(peerId, senderId);

    if (senderUserRole < 20) {
      return context.reply('‚ùì –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!\n‚ùì –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ä–æ–ª—å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä');
    }

    try {
      const selectAllUsersQuery = `
        SELECT user_id, blocked_users
        FROM conference_${conferenceId}
      `;

      database.query(selectAllUsersQuery, async (error, results) => {
        if (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
          return context.send('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.');
        }

        const banList = [];
        const userIds = results.map(nickInfo => nickInfo.user_id);

        try {
          const userInfos = await vk.api.users.get({ user_ids: userIds });
			
          const userMap = userInfos.reduce((acc, user) => {
            acc[user.id] = user;
            return acc;
          }, {});

          for (const result of results) {
            const userId = result.user_id;
            const blockedUsers = result.blocked_users ? JSON.parse(result.blocked_users) : [];

            for (const block of blockedUsers) {
              if (block.blocked_user_id) {
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è blocked_user_id –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                banList.push({
                  userId,
                  blockedUserId: block.blocked_user_id,
                  blockedBy: block.blocked_by,
                  blockUntil: block.block_until,
                  reason: block.reason,
                });
              }
            }
          }

          if (banList.length === 0) {
            context.reply('üîá –°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.');
          } else {
            const formattedBanList = banList.map((block, index) => {
              const userInfo = userMap[block.blockedUserId];
              return `${index + 1}. [id${block.blockedUserId}|${userInfo.first_name} ${userInfo.last_name}]`;
            });

            context.reply(`üîá –°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n${formattedBanList.join('\n')}`);
          }
        } catch (error) {
          console.error(error);
          context.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.');
        }
      });
    } catch (error) {
      console.error(error);
      context.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.');
    }
  },
};
