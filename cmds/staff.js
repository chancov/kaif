const database = require('../databases.js');
const { checkIfTableExists, getUserRole } = require('./roles.js');
const axios = require('axios');

module.exports = {
  command: '/staff',
  aliases: ['/staff'],
  description: '–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤',
  async execute(context) {
    const { peerId } = context;
    const conferenceId = peerId;

    if (!await checkIfTableExists(`roles_${conferenceId}`)) {
      return context.send('‚ùå –í–∞—à–∞ –±–µ—Å–µ–¥–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!');
    }
    const senderRoleId = await getUserRole(context.peerId, context.senderId);
    if (senderRoleId < 20) {
      return context.reply('‚ùå –û—Ç–∫–∞–∑–∞–Ω–æ, –≤–∞—à–∞ —Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∞—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
    }
    const roles = {
      20: 'üèπ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä',
      40: 'üé© –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
      60: 'üî• –°–ø–µ—Ü –ê–¥–º–∏–Ω',
      80: 'üî± –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å',
      100: '‚öúÔ∏è –í–ª–∞–¥–µ–ª–µ—Ü',
    };
    const startTime = Date.now();
    const getStaffQuery = `
      SELECT user_id, role_id
      FROM roles_${conferenceId}
      WHERE role_id
      ORDER BY role_id DESC
    `;

    database.query(getStaffQuery, async (error, results) => {
      if (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤:', error);
        return context.send('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.');
      }

      if (results.length === 0) {
        return context.send('‚ùå –í –¥–∞–Ω–Ω–æ–π –±–µ—Å–µ–¥–µ –Ω–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤.');
      }

      const userIds = results.map(row => row.user_id);


      const userInfos = await vk.api.users.get({ user_ids: userIds });

      const staffByRole = {};

      for (const row of results) {
        const { user_id, role_id } = row;
        const roleName = roles[role_id]; // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–æ–ª–∏ –∏–∑ —á–∏—Å–ª–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
        const userInfo = userInfos.find(user => user.id === user_id);

        if (!staffByRole.hasOwnProperty(roleName) && userInfo) {
          staffByRole[roleName] = [];
        }

        if (userInfo) {
          staffByRole[roleName].push(`‚Äî [id${userInfo.id}|${userInfo.first_name} ${userInfo.last_name}]`);
        }
      }

      const endTime = Date.now();
      const executionTime = endTime - startTime;
      const executionTimeInSeconds = executionTime / 1000;

      let staffMessage = ``;
      for (const roleName of Object.keys(staffByRole)) {
        staffMessage += `${roleName}:\n${staffByRole[roleName].join('\n')}\n\n`;
      }

      if (staffMessage) {
        context.send({ message: staffMessage, disable_mentions: true });
      } else {
        context.send('‚ùå –í –¥–∞–Ω–Ω–æ–π –±–µ—Å–µ–¥–µ –Ω–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤.');
      }
    });
  },
};
