const { checkUserRole, checkIfTableExists, getUserRole, getRoleName, getRoleNamezov } = require('./roles.js');
const database = require('../databases.js');

module.exports = {
  command: '/warnhistory',
  description: '–ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
  async execute(context) {
    const { peerId, text, replyMessage } = context;
    let target;

    if (replyMessage) {
      target = replyMessage.senderId;
    } else {
      target = text.split(' ')[1];
    }

    if (!target) {
      return context.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å.');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if (!await checkIfTableExists(`conference_${peerId}`)) {
      console.error('–¢–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      return context.send('‚ùå –ë–µ—Å–µ–¥–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!');
    }

    const senderId = context.senderId;
    const senderRole = await getUserRole(peerId, senderId);
    const targetId = await extractNumericId(target);

    if (senderRole <= 20) {
      return context.reply('‚ùå –û—Ç–∫–∞–∑–∞–Ω–æ, –≤–∞—à–∞ —Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∞—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
    }

    if (!targetId) {
      return context.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
    }

    const selectUserInfoQuery = `
      SELECT warns_history
      FROM conference_${peerId}
      WHERE user_id = ?
    `;

    database.query(selectUserInfoQuery, [targetId], (error, results) => {
      if (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π:', error);
        return context.send('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.');
      }

      if (results.length === 0) {
        return context.reply('‚ùå –£–∫–∞–∑–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–º–µ–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π.');
      }

      const { warns_history } = results[0];
      const history = JSON.parse(warns_history);

      if (!Array.isArray(history) || history.length === 0) {
        return context.reply('‚ùå –£–∫–∞–∑–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–º–µ–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π.');
      }

	const formattedHistoryPromises = history.map(async (item, index) => {
	  const { Date: itemDate, Reason, Author } = item;
	  const formattedDate = new Date(itemDate).toLocaleString();
	  const pukikaki = await getlink(Author);
	  return `${index + 1}. ${Reason} | –í—ã–¥–∞–ª: ${pukikaki} (–î–∞—Ç–∞: ${formattedDate})`;
	});

	Promise.all(formattedHistoryPromises)
	  .then((formattedHistory) => {
		context.reply(`üìò –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π [id${targetId}|–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]:\n\n${formattedHistory.join('\n')}`);
	  })
	  .catch((error) => {
		console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏:', error);
		context.send('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π.');
	  });
    });
  },
};
