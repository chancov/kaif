const { checkIfTableExists, getRoleNamezov, getRoleName, getUserRole, getpoolkey } = require('./roles.js');
const database = require('../databases.js'); // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const util = require('util');
const databaseQuery = util.promisify(database.query);

module.exports = {
  command: '/gzov',
  aliases: ['/–≥–∑–æ–≤', '/–≥—Ä—É–ø–ø–æ–≤–æ–π–∑–æ–≤'],
  description: '–ú–∞—Å—Å–æ–≤–æ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø—É–ª–ª–µ',
  async execute(context) {
    const messageText = context.text;
    const { peerId, senderId, replyMessage } = context;
    const parts = messageText.split(' ');
    const senderUserRole = await getUserRole(peerId, senderId);
    const reason = messageText.slice('/gzov'.length).trim();

    if (!(await checkIfTableExists(`nicknames_${peerId}`))) {
      console.error('–¢–∞–±–ª–∏—Ü–∞ –Ω–∏–∫–Ω–µ–π–º–æ–≤ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      return context.send('–í–∞—à–∞ –±–µ—Å–µ–¥–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!');
    }

    if (senderUserRole < 40) {
      const roleName = getRoleName(senderUserRole);
      return context.reply(`‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã. –í–∞—à–∞ —Ç–µ–∫—É—â–∞—è —Ä–æ–ª—å: ${roleName}`);
    }
    if (!reason) {
      return context.reply('‚ùå –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –ø—Ä–∏—á–∏–Ω—É –≤—ã–∑–æ–≤–∞');
    }

    const selectPoolQuery = `
      SELECT *
      FROM pools
      WHERE pool_peerIds LIKE ?
    `;

    try {
    const selectResults = await databaseQuery(selectPoolQuery, [`%${peerId}%`]);
    if (selectResults.length === 0) {
      return context.reply('‚ùå –ü—É–ª–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    }

    const pool = selectResults[0];
    const poolKey = pool.pool_key;

    if (!poolKey) {
      return context.reply(`–£ –≤–∞—Å –Ω–µ—Ç—É –æ–±—â–µ–≥–æ –ø—É–ª–ª–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è`);
    }

    const role = await getRoleNamezov(senderUserRole);

    // Send to all conversations in the pool
    const poolPeerIds = JSON.parse(pool.pool_peerIds || '[]');
    for (const poolPeerId of poolPeerIds) {
    const senderUserRolee = await getUserRole(poolPeerId, senderId);
	if(senderUserRolee < 40) {
		continue;
	}
	  
    const conversationMembers = await vk.api.messages.getConversationMembers({
      peer_id: poolPeerId,
    });

    const memberProfiles = conversationMembers.profiles; // –ú–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
    let message = '';

    for (const member of memberProfiles) {
      const name = `[id${member.id}|‚òëÔ∏è]`;
      message += `${name} `;
    }

    const editedMessage = `
      üîä –í—ã –±—ã–ª–∏ –≤—ã–∑–≤–∞–Ω—ã [id${senderId}|–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º] –±–µ—Å–µ–¥—ã.
	  
	  ${message}
	  
      –ü—Ä–∏—á–∏–Ω–∞: ${reason}!‚Äã‚Å¨‚Äã‚Å¨‚Äã‚Å¨‚Äã‚Å¨‚Äã‚Å¨‚Äã‚Å¨‚Äã‚Å¨‚Äã‚Å¨‚Äã‚Å¨‚Äã‚Å¨‚Äã‚Å¨‚Äã‚Å¨‚Äã‚Å¨‚Äã‚Å¨‚Äã‚Å¨‚Äã‚Å¨‚Äã‚Å¨‚Äã‚Å¨‚Äã‚Å¨‚Äã‚Å¨‚Äã‚Å¨‚Äã‚Å¨‚Äã‚Å¨‚Äã‚Å¨‚Äã‚Å¨‚Äã‚Å¨‚Äã‚Å¨‚Äã‚Å¨‚Äã‚Å¨‚Äã‚Å¨‚Äã‚Å¨‚Äã‚Å¨‚Äã‚Å¨‚Äã‚Å¨‚Äã‚Å¨‚Äã‚Å¨‚Äã‚Å¨‚Äã‚Å¨‚Äã‚Å¨‚Äã‚Å¨
      `;
	  
      await vk.api.messages.send({
        peer_id: poolPeerId,
        message: editedMessage,
        random_id: generateRandom32BitNumber(),
      });
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø—É–ª–ª–∞:', error);
    return context.send(`‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${error}`);
  }
  },
};
