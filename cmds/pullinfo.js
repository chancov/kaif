const database = require('../databases.js'); // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const { getUserRole, checkIfTableExists } = require('./roles.js');

module.exports = {
  command: '/pullinfo',
  description: '–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—É–ª–ª–µ',
  async execute(context) {
    const { peerId, senderId } = context;

    const senderRoleId = await getUserRole(peerId, senderId);

    if (senderRoleId < 20) {
      return context.send('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø—É–ª–∞');
    }

    if (!await checkIfTableExists(`nicknames_${peerId}`)) {
      console.error('–¢–∞–±–ª–∏—Ü–∞ –Ω–∏–∫–Ω–µ–π–º–æ–≤ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      return context.send('‚ùå –í–∞—à–∞ –±–µ—Å–µ–¥–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!');
    }

    const selectPoolQuery = `
      SELECT *
      FROM pools
      WHERE pool_peerIds LIKE ?
    `;

    database.query(selectPoolQuery, [`%${peerId}%`], async (selectError, selectResults) => {
      if (selectError) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—É–ª–µ:', selectError);
        return context.send('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.');
      }

      if (selectResults.length > 0) {
        const pool = selectResults[0];
        const poolName = pool.pool_name;
        const poolKey = pool.pool_key;
        const creatorId = pool.creator_id;
        const createdAt = pool.created_at;

        const creatorLink = await getlink(creatorId);

        const poolPeerIds = JSON.parse(pool.pool_peerIds || '[]');

        // –ó–¥–µ—Å—å –≤—ã –¥–æ–ª–∂–Ω—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å—ã –∫ API –í–ö–æ–Ω—Ç–∞–∫—Ç–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –±–µ—Å–µ–¥ –∏–∑ poolPeerIds
		const chatNames = await getChatNames(poolPeerIds);
		const chatList = Object.entries(chatNames)
		  .sort(([peerIdA], [peerIdB]) => Number(peerIdA) - Number(peerIdB)) // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –Ω–æ–º–µ—Ä—É —á–∞—Ç–∞
		  .map(([peerId, chatName], index) => `${index + 1}. –ß–∞—Ç: ${chatName}`)
		  .join('\n');

	  
        const currentDate = new Date(createdAt);
        const formattedTime = currentDate.toLocaleString('ru', {
          weekday: 'long',
          day: 'numeric',
          month: 'long',
          year: 'numeric',
          hour: '2-digit',
          minute: '2-digit',
        });

        return context.reply(`
‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–∏:
üìá –ò–º—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è: ${poolName}
üëë –í–ª–∞–¥–µ–ª–µ—Ü: ${creatorLink}
üîê –ö–ª—é—á –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è: #${poolKey}
üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${formattedTime}

‚ú® –ù–∞–∑–≤–∞–Ω–∏—è —á–∞—Ç–æ–≤ –≤ –ø—É–ª–µ:

${chatList}
`);
      } else {
        return context.reply('‚ùå –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è –¥–∞–Ω–Ω–æ–π –±–µ—Å–µ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');
      }
    });
  },
};

async function getChatNames(peerIds) {
  const chatNames = {};

  for (const peerId of peerIds) {
    try {
      const chatInfo = await vk.api.messages.getConversationsById({ peer_ids: peerId });

      if (chatInfo.items && chatInfo.items.length > 0) {
        const chat = chatInfo.items[0];
        const title = chat.chat_settings ? chat.chat_settings.title : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        chatNames[peerId] = title;
      }
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —á–∞—Ç–∞ –¥–ª—è peerId ${peerId}:`, error);
      chatNames[peerId] = '–û—à–∏–±–∫–∞';
    }
  }

  return chatNames;
}
