const database = require('../databases.js');
const { checkUserRole, checkIfTableExists } = require('../util.js');

module.exports = {
  command: '/nlist',
  aliases: ['/nlist'],
  description: '–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–∏–∫–Ω–µ–π–º–æ–≤',
  async execute(context) {
    const conferenceId = context.peerId;

    if (!await checkIfTableExists(`nicknames_${conferenceId}`)) {
      console.error('–¢–∞–±–ª–∏—Ü–∞ –Ω–∏–∫–Ω–µ–π–º–æ–≤ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      return context.send('–í–∞—à–∞ –±–µ—Å–µ–¥–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!');
    }

    const hasPermission = await checkUserRole(context.peerId, context.senderId, '–º–æ–¥–µ—Ä–∞—Ç–æ—Ä');

    if (!hasPermission) {
      return;
    }

    const selectNicknamesQuery = `
      SELECT user_id, nickname FROM nicknames_${conferenceId}
    `;

    database.query(selectNicknamesQuery, async (error, results) => {
      if (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Å–ø–∏—Å–∫–∞ –Ω–∏–∫–Ω–µ–π–º–æ–≤:', error);
        return context.send('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.');
      }

      if (results.length === 0) {
        return context.send('–°–ø–∏—Å–æ–∫ –Ω–∏–∫–Ω–µ–π–º–æ–≤ –ø—É—Å—Ç.');
      }

      const userIds = results.map(nickInfo => nickInfo.user_id);

      try {
        const userInfos = await vk.api.users.get({ user_ids: userIds });
		
		console.log(userInfos)
		
        const userMap = userInfos.reduce((acc, user) => {
          acc[user.id] = user;
          return acc;
        }, {});

        let message = 'üìñ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–∏–∫–∞–º–∏:\n\n';
        let index = 1;

        for (const nickInfo of results) {
          const userInfo = userMap[nickInfo.user_id];
          if (userInfo) {
            message += `${index}. [id${userInfo.id}|${userInfo.first_name} ${userInfo.last_name}] - ${nickInfo.nickname}\n`;
            index++;
          }
        }

        context.send({ message: message, disable_mentions: true });
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö:', error);
        return context.send('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.');
      }
    });
  },
};
