const axios = require('axios');
const database = require('../databases.js');

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–ø—ã—Ç–æ–∫ –∏ –∫—É–ª–¥–∞—É–Ω–æ–≤
const rouletteAttempts = new Map();
const rouletteCooldowns = new Map();

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏
const GROUP_SCREEN_NAME = 'chancov';
const ADMIN_ID = 705208993;

let TARGET_GROUP_ID = null;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
function executeQuery(sql, params = []) {
    return new Promise((resolve, reject) => {
        database.query(sql, params, (error, results) => {
            if (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞:', error);
                reject(error);
            } else {
                resolve(results);
            }
        });
    });
}


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –≥—Ä—É–ø–ø—ã
async function getGroupId() {
    try {
        console.log('–ü–æ–ª—É—á–∞—é ID –≥—Ä—É–ø–ø—ã...');
        
        const response = await axios.get('https://api.vk.com/method/groups.getById', {
            params: {
                group_ids: GROUP_SCREEN_NAME,
                access_token: process.env.VK_TOKEN,
                v: '5.131'
            }
        });

        if (response.data.response && response.data.response[0]) {
            const groupId = -response.data.response[0].id;
            console.log('‚úÖ ID –≥—Ä—É–ø–ø—ã –ø–æ–ª—É—á–µ–Ω:', groupId);
            return groupId;
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID –≥—Ä—É–ø–ø—ã:', error.response?.data || error.message);
    }
    
    return null;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ LongPoll
async function startGroupLongPoll() {
    
    // –ü–æ–ª—É—á–∞–µ–º ID –≥—Ä—É–ø–ø—ã
    TARGET_GROUP_ID = await getGroupId();
    
    if (!TARGET_GROUP_ID) {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –≥—Ä—É–ø–ø—ã');
        return;
    }

    try {
        const groupIdPositive = Math.abs(TARGET_GROUP_ID);
        const response = await axios.get('https://api.vk.com/method/groups.getLongPollServer', {
            params: {
                group_id: groupIdPositive,
                access_token: process.env.VK_TOKEN,
                v: '5.131'
            }
        });

        if (response.data.error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ LongPoll —Å–µ—Ä–≤–µ—Ä–∞:', response.data.error);
            return;
        }

        const server = response.data.response;
        console.log('‚úÖ LongPoll server –ø–æ–ª—É—á–µ–Ω');
        
        listenToGroupEvents(server);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è LongPoll —Å–µ—Ä–≤–µ—Ä–∞:', error);
        setTimeout(startGroupLongPoll, 10000);
    }
}

// –ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –≥—Ä—É–ø–ø—ã
async function listenToGroupEvents(server) {
    try {
        const response = await axios.get(`${server.server}`, {
            params: {
                act: 'a_check',
                key: server.key,
                ts: server.ts,
                wait: 25
            }
        });

        const updates = response.data;
        
        if (updates.updates) {
            for (const update of updates.updates) {
                await handleGroupUpdate(update);
            }
        }

        server.ts = updates.ts;
        setTimeout(() => listenToGroupEvents(server), 100);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ LongPoll:', error);
        setTimeout(startGroupLongPoll, 5000);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –≥—Ä—É–ø–ø—ã
async function handleGroupUpdate(update) {
    try {
        if (update.type === 'wall_reply_new') {
            const comment = update.object;
            
            if (comment.owner_id === TARGET_GROUP_ID) {
                const commentText = comment.text.toLowerCase();
                
                if (commentText.includes('—Ä—É–ª–µ—Ç–∫–∞')) {
                    console.log('üé∞ –ù–∞–π–¥–µ–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å —Ä—É–ª–µ—Ç–∫–æ–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', comment.from_id);
                    
                    const resultMessage = await handleRoulette(
                        comment.from_id,
                        comment.post_id,
                        comment.id
                    );
                    
                    await replyToComment(comment, resultMessage);
                }
            }
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
async function replyToComment(comment, message) {
    try {
        await axios.get('https://api.vk.com/method/wall.createComment', {
            params: {
                owner_id: comment.owner_id,
                post_id: comment.post_id,
                reply_to_comment: comment.id,
                message: message,
                access_token: process.env.VK_TOKEN,
                v: '5.131',
                random_id: Math.floor(Math.random() * 1000000)
            }
        });
        
        console.log('‚úÖ –û—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:', error);
    }
}

// –û–±–Ω–æ–≤–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é handleRoulette
async function handleRoulette(userId, postId, commentId) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω
    const now = Date.now();
    const lastSpinTime = rouletteCooldowns.get(userId) || 0;
    const cooldownTime = 60 * 1000;

    if (now - lastSpinTime < cooldownTime) {
        const remainingTime = Math.ceil((cooldownTime - (now - lastSpinTime)) / 1000);
        return `‚è∞ –ü–æ–¥–æ–∂–¥–∏—Ç–µ ${remainingTime} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π.`;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
    const attemptsKey = `${userId}_${postId}`;
    const attempts = rouletteAttempts.get(attemptsKey) || 0;

    if (attempts >= 3) {
        return '‚ùå –í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –≤—Å–µ 3 –ø–æ–ø—ã—Ç–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Å—Ç–∞.';
    }

    // –ö—Ä—É—Ç–∏–º —Ä—É–ª–µ—Ç–∫—É
    const result = spinRoulette();

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ø—ã—Ç–∫–∏ –∏ –∫—É–ª–¥–∞—É–Ω
    rouletteAttempts.set(attemptsKey, attempts + 1);
    rouletteCooldowns.set(userId, now);

    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–ø–∏–Ω–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await incrementUserSpins(userId);

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    let message = '';
    
    if (result.type === 'empty') {
        message = 'üé∞ –†–µ–∑—É–ª—å—Ç–∞—Ç: –ü—É—Å—Ç–æ—Ç–∞... –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!';
        await saveSpinResult(userId, postId, commentId, result);
    } 
    else if (result.type === 'candy') {
        await addCandiesToUser(userId, result.amount);
        await saveSpinResult(userId, postId, commentId, result);
        message = `üé∞ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${result.amount} –∫–æ–Ω—Ñ–µ—Ç–æ–∫! üç¨`;
    } 
    else if (result.type === 'vip') {
        await addCandiesToUser(userId, 0); // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, –Ω–æ –±–µ–∑ –∫–æ–Ω—Ñ–µ—Ç–æ–∫
        await saveVipWin(userId, postId, commentId);
        await saveSpinResult(userId, postId, commentId, result);
        message = `üé∞ –í–ê–£! –í–´ –í–´–ò–ì–†–ê–õ–ò VIP-–°–¢–ê–¢–£–°! üéâ\n\n` +
                 `–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–∑–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: vk.com/write${ADMIN_ID}\n` +
                 `–í–∞—à ID: ${userId}`;
        
        await notifyAdminAboutVIP(userId, commentId, postId);
    }

    return message;
}
// –§—É–Ω–∫—Ü–∏—è –∫—Ä—É—Ç–∫–∏ —Ä—É–ª–µ—Ç–∫–∏ - –£–ë–ï–î–ò–¢–ï–°–¨ –ß–¢–û –û–ù–ê –ï–°–¢–¨ –í –ö–û–î–ï
function spinRoulette() {
    const random = Math.random();
    
    if (random < 0.02) {
        return { type: 'vip', win: true };
    } 
    else if (random < 0.5) {
        const candyAmount = Math.floor(Math.random() * 5) + 1;
        return { type: 'candy', amount: candyAmount, win: true };
    } 
    else {
        return { type: 'empty', win: false };
    }
}
// –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ —Å–ø–∏–Ω–æ–≤
async function incrementUserSpins(userId) {
    try {
        const userInfo = await getVKUserInfo(userId);
        const username = userInfo ? `${userInfo.first_name} ${userInfo.last_name}` : 'Unknown';
        
        await executeQuery(
            `INSERT INTO roulette_users (user_id, username, total_spins) 
             VALUES (?, ?, 1)
             ON DUPLICATE KEY UPDATE 
             total_spins = total_spins + 1,
             last_spin = CURRENT_TIMESTAMP`,
            [userId, username]
        );
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–∏ —Å—á–µ—Ç—á–∏–∫–∞ —Å–ø–∏–Ω–æ–≤:', error);
    }
}

// –û–±–Ω–æ–≤–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é addCandiesToUser (—É–±–µ—Ä–∏—Ç–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ total_spins –æ—Ç—Å—é–¥–∞)
async function addCandiesToUser(userId, amount) {
    try {
        const userInfo = await getVKUserInfo(userId);
        const username = userInfo ? `${userInfo.first_name} ${userInfo.last_name}` : 'Unknown';
        
        await executeQuery(
            `INSERT INTO roulette_users (user_id, username, candies, total_won) 
             VALUES (?, ?, ?, ?)
             ON DUPLICATE KEY UPDATE 
             candies = candies + ?, 
             total_won = total_won + ?,
             last_spin = CURRENT_TIMESTAMP`,
            [userId, username, amount, amount, amount, amount]
        );
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–µ—Ç–æ–∫:', error);
    }
}

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–ø–∏–Ω–∞
    async function saveSpinResult(userId, postId, commentId, result) {
        try {
            await executeQuery(
                `INSERT INTO roulette_spins (user_id, post_id, comment_id, result_type, result_amount, is_win)
                VALUES (?, ?, ?, ?, ?, ?)`,
                [userId, postId, commentId, result.type, result.amount || 0, result.win || false]
            );
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–ø–∏–Ω–∞:', error);
        }
    }

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ VIP –ø–æ–±–µ–¥—ã
async function saveVipWin(userId, postId, commentId) {
    try {
        await executeQuery(
            `INSERT INTO roulette_vip_wins (user_id, post_id, comment_id)
             VALUES (?, ?, ?)`,
            [userId, postId, commentId]
        );
        
        await executeQuery(
            `UPDATE roulette_users SET vip_wins = vip_wins + 1 WHERE user_id = ?`,
            [userId]
        );
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ VIP –ø–æ–±–µ–¥—ã:', error);
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function getUserStats(userId) {
    try {
        const rows = await executeQuery(
            `SELECT candies, total_won, vip_wins, total_spins FROM roulette_users WHERE user_id = ?`,
            [userId]
        );
        
        if (rows && rows.length > 0) {
            return rows[0];
        }
        
        return { candies: 0, total_won: 0, vip_wins: 0, total_spins: 0 };
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        return { candies: 0, total_won: 0, vip_wins: 0, total_spins: 0 };
    }
}

// –§—É–Ω–∫—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async function notifyAdminAboutVIP(userId, commentId, postId) {
    try {
        const userInfo = await getVKUserInfo(userId);
        const userName = userInfo ? `${userInfo.first_name} ${userInfo.last_name}` : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
        
        const message = `üéâ –í–ê–ñ–ù–û! –ü–û–ë–ï–î–ê –í –†–£–õ–ï–¢–ö–ï!\n\n` +
                       `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: [id${userId}|${userName}]\n` +
                       `–í—ã–∏–≥—Ä–∞–ª VIP-—Å—Ç–∞—Ç—É—Å –≤ —Ä—É–ª–µ—Ç–∫–µ!\n` +
                       `–ü–æ—Å—Ç: https://vk.com/wall${TARGET_GROUP_ID}_${postId}\n` +
                       `–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: https://vk.com/wall${TARGET_GROUP_ID}_${postId}?reply=${commentId}\n\n` +
                       `–û–∂–∏–¥–∞–µ—Ç –≤—ã–¥–∞—á–∏ –ø—Ä–∏–∑–∞.`;

        await axios.get('https://api.vk.com/method/messages.send', {
            params: {
                user_id: ADMIN_ID,
                message: message,
                access_token: process.env.VK_TOKEN,
                v: '5.131',
                random_id: Math.floor(Math.random() * 1000000)
            }
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
async function getVKUserInfo(userId) {
    try {
        const response = await axios.get('https://api.vk.com/method/users.get', {
            params: {
                user_ids: userId,
                access_token: process.env.VK_TOKEN,
                v: '5.131'
            }
        });

        return response.data.response?.[0] || null;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:', error);
        return null;
    }
}

// –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –±–æ—Ç–∞
module.exports = {
    command: '/candies',
    aliases: ['/–∫–æ–Ω—Ñ–µ—Ç–∫–∏', '/–±–∞–ª–∞–Ω—Å'],
    description: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ñ–µ—Ç–æ–∫ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É',
    async execute(context) {
        try {
            const userId = context.senderId;
            const stats = await getUserStats(userId);
            
            let message = `üç¨ –í–∞—à –±–∞–ª–∞–Ω—Å: ${stats.candies} –∫–æ–Ω—Ñ–µ—Ç–æ–∫\n`;
            message += `üéØ –í—Å–µ–≥–æ –≤—ã–∏–≥—Ä–∞–Ω–æ –∫–æ–Ω—Ñ–µ—Ç: ${stats.total_won}\n`;
            message += `‚≠ê VIP –ø–æ–±–µ–¥: ${stats.vip_wins}\n`;
            message += `üé∞ –í—Å–µ–≥–æ —Å–ø–∏–Ω–æ–≤: ${stats.total_spins}`;
            
            await context.send(message);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ candies:', error);
            await context.send('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
        }
    }
};

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º—É
console.log('üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã —Ä—É–ª–µ—Ç–∫–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö...');
startGroupLongPoll();