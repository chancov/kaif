const database = require('../databases.js');
const { checkUserRole, checkIfTableExists, getUserRole } = require('./roles.js');
const util = require('util');
const queryAsync = util.promisify(database.query).bind(database);

module.exports = {
  command: '/settings',
  description: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ—Å–µ–¥—ã',
  execute: async (context) => {
    const { peerId, text, senderId, replyMessage } = context;
    const conferenceId = peerId;
    const messageText = context.text;
    const parts = messageText.split(' ');

    if (!await checkIfTableExists(`conference_${peerId}`)) {
      console.error('–¢–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      return context.send('‚ùå –ë–µ—Å–µ–¥–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!');
    }

    const senderUserRole = await getUserRole(peerId, context.senderId);

    if (senderUserRole < 80) {
      return context.reply('‚ùå –û—Ç–∫–∞–∑–∞–Ω–æ, –≤–∞—à–∞ —Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∞—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
    }

    try {
      const getHelloTextQuery = `
        SELECT *
        FROM conference
        WHERE conference_id = ?
      `;

      database.query(getHelloTextQuery, [peerId], async (error, results) => {
        if (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–µ—Å–µ–¥—ã:', error);
          return context.send('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–µ—Å–µ–¥—ã.');
        }

        const helloText = results[0] && results[0].hello_text ? results[0].hello_text : '–ù–µ –Ω–∞–π–¥–µ–Ω–æ';
        const kickUser = results[0] && results[0].kick_leave ? results[0].kick_leave : 0;
        const rules = results[0] && results[0].rules;
        const stickers = results[0] && results[0].stickers;
        const docs = results[0] && results[0].docs;
        const reposts = results[0] && results[0].reposts;
        const links = results[0] && results[0].links;
        const images = results[0] && results[0].images;
        const groups = results[0] && results[0].groups;
        const video = results[0] && results[0].video;
        const cooldown = results[0] && results[0].cooldown;

        let settingsInfo = `‚ùì –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞\n`;

        if (kickUser === 1) {
          settingsInfo += '\nüî∏ –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞ [kick_leave]: ‚úÖ';
        } else {
          settingsInfo += '\nüî∏ –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞ [kick_leave]: ‚ùå';
        }

        settingsInfo += `\nüî∏ –°—Ç–∞—Ç—É—Å –ø—Ä–∞–≤–∏–ª: ${rules !== null ? '‚úÖ' : '‚ùå'}`;
        settingsInfo += `\nüî∏ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ: ${helloText !== null ? '‚úÖ' : '‚ùå'}`
        settingsInfo += `\nüî∏ –ó–∞–ø—Ä–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∏–∫–µ—Ä–æ–≤ –≤ —á–∞—Ç–µ [stickers]: ${stickers ? '‚úÖ' : '‚ùå'}`
        settingsInfo += `\nüî∏ –ó–∞–ø—Ä–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ —á–∞—Ç–µ [docs]: ${docs ? '‚úÖ' : '‚ùå'}`
        settingsInfo += `\nüî∏ –ó–∞–ø—Ä–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–ø–æ—Å—Ç–æ–≤ –≤ —á–∞—Ç–µ [reposts]: ${reposts ? '‚úÖ' : '‚ùå'}`
        settingsInfo += `\nüî∏ –ó–∞–ø—Ä–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Å—ã–ª–æ–∫ –≤ —á–∞—Ç–µ [links]: ${links ? '‚úÖ' : '‚ùå'}`
        settingsInfo += `\nüî∏ –ó–∞–ø—Ä–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ —á–∞—Ç–µ [images]: ${images ? '‚úÖ' : '‚ùå'}`
        settingsInfo += `\nüî∏ –ó–∞–ø—Ä–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ–∑–∞–ø–∏—Å–µ–π –≤ —á–∞—Ç–µ [video]: ${video ? '‚úÖ' : '‚ùå'}`
        settingsInfo += `\nüî∏ –ó–∞–ø—Ä–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø –≤ —á–∞—Ç [groups]: ${groups ? '‚úÖ' : '‚ùå'}`
        settingsInfo += `\nüî∏ –ê–Ω—Ç–∏-—Å–ø–∞–º —Å–∏—Å—Ç–µ–º–∞ [spam]: –û—Ç–∫–ª—é—á–µ–Ω–æ`
        settingsInfo += `\nüî∏ –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ [cooldown]: ${cooldown} —Å–µ–∫.`
        settingsInfo += `\n\n‚ùì –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∞–≤–∏–ª –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: /–Ω–æ–≤—ã–µ–ø—Ä–∞–≤–∏–ª–∞`
        settingsInfo += `\n‚ùì –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: /–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ`
        settingsInfo += `\n‚ùì –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–ø—Ä–µ—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /settings [—Ç–∏–ø] [0 - –≤—ã–∫–ª | 1 - –≤–∫–ª]`

        if (!parts[1]) {
          return context.reply(settingsInfo);
        }

        if (parts[1] === 'kick_leave') {
          if (!parts[2]) {
            return context.send('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /settings –∏—Å–∫–ª—é—á–∞—Ç—å [0|1]');
          }

          const newKickUser = parseInt(parts[2]);

          if (newKickUser !== 0 && newKickUser !== 1) {
            return context.send('–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: 0 (–Ω–µ—Ç) –∏–ª–∏ 1 (–¥–∞)');
          }

          try {
            const updateKickUserQuery = 'UPDATE conference SET kick_leave = ? WHERE conference_id = ?';
            await queryAsync(updateKickUserQuery, [newKickUser, conferenceId]);
            return context.send(`–ò—Å–∫–ª—é—á–∞—Ç—å –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${newKickUser === 1 ? '‚úÖ' : '‚ùå'}`);
          } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ:', error);
            return context.send('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ.');
          }
        } else if (parts[1] === 'stickers' || parts[1] === 'docs' || parts[1] === 'reposts' || parts[1] === 'links' || parts[1] === 'images' || parts[1] === 'groups' || parts[1] === 'video') {
          if (!parts[2]) {
            return context.send(`–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /settings ${parts[1]} [0|1]`);
          }
        
          const newValue = parseInt(parts[2]); // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤ —á–∏—Å–ª–æ
        
          if (isNaN(newValue) || (newValue !== 0 && newValue !== 1)) {
            return context.send('‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: 0 (–Ω–µ—Ç) –∏–ª–∏ 1 (–¥–∞)');
          }
        
          let settingName = '';
          switch (parts[1]) {
            case 'stickers':
              settingName = '–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä–æ–≤';
              break;
            case 'docs':
              settingName = '–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤';
              break;
            case 'reposts':
              settingName = '–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–æ—Å—Ç–æ–≤';
              break;
            case 'links':
              settingName = '–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫';
              break;
            case 'images':
              settingName = '–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π';
              break;
            case 'groups':
              settingName = '–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ—Å—Ç–≤';
              break;
            case 'video':
              settingName = '–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ';
              break;
            default:
              settingName = '–Ω–∞—Å—Ç—Ä–æ–µ–∫';
          }
        
          try {
            const updateQuery = `UPDATE conference SET \`${parts[1]}\` = ? WHERE conference_id = ?`;
            await queryAsync(updateQuery, [newValue, conferenceId]);
            const successMessage = newValue ? `–∑–∞–ø—Ä–µ—â–µ–Ω–æ` : `—Ä–∞–∑—Ä–µ—à–µ–Ω–æ`;
            return context.send(`‚úÖ –¢–µ–ø–µ—Ä—å –≤ —á–∞—Ç–µ ${successMessage} ${settingName}.`);
          } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ ${parts[1]}:`, error);
            return context.send(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ ${parts[1]}.`);
          }
        }
         else if (parts[1] === 'cooldown') {
          if (!parts[2]) {
            return context.send(`–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /settings cooldown [–∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 0 –¥–æ 15]`);
          }
          
          const newCooldownValue = parseInt(parts[2]); // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤ —á–∏—Å–ª–æ
          
          if (isNaN(newCooldownValue) || newCooldownValue < 0 || newCooldownValue > 15) {
            return context.send('‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ! –í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 0 –¥–æ 15 —Å–µ–∫.');
          }
          
          try {
            const updateCooldownQuery = 'UPDATE conference SET cooldown = ? WHERE conference_id = ?';
            await queryAsync(updateCooldownQuery, [newCooldownValue, conferenceId]);
            return context.send(`‚úÖ –¢–µ–ø–µ—Ä—å –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ —Ä–∞–≤–Ω–∞ ${newCooldownValue} —Å–µ–∫.\n‚ùì –ó–∞–¥–µ—Ä–∂–∫–∞ –Ω–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—å—é ¬´–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä¬ª –∏ –≤—ã—à–µ.`);
          } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–Ω–∞—á–µ–Ω–∏—è cooldown:', error);
            return context.send('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–Ω–∞—á–µ–Ω–∏—è cooldown.');
          }
        }        
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /settings:', error);
      context.send('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /settings.');
    }
  },
};
