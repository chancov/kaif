const { getUserRole } = require('./roles.js');
const axios = require('axios');
const cheerio = require('cheerio');

function formatRegistrationDate(timestamp) {
  if (!timestamp) return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
  
  try {
    const date = new Date(timestamp * 1000);
    if (isNaN(date.getTime())) return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';

    const day = date.getDate();
    const month = date.getMonth() + 1;
    const year = date.getFullYear();
    const hours = date.getHours();
    const minutes = date.getMinutes();

    const formattedDay = day < 10 ? `0${day}` : day;
    const formattedMonth = month < 10 ? `0${month}` : month;
    const formattedMinutes = minutes < 10 ? `0${minutes}` : minutes;

    return `${formattedDay}.${formattedMonth}.${year} –≤ ${hours}:${formattedMinutes}`;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã:', error);
    return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
  }
}

async function extractNumericId(input) {
  if (!input) return null;
  
  if (/^\d+$/.test(input)) {
    return parseInt(input);
  }
  
  const idMatch = input.match(/\[id(\d+)\|/);
  if (idMatch) {
    return parseInt(idMatch[1]);
  }
  
  const screenNameMatch = input.match(/^(?:https?:\/\/)?vk\.com\/([a-zA-Z0-9_.]+)/);
  if (screenNameMatch) {
    try {
      const response = await axios.get(`https://api.vk.com/method/users.get`, {
        params: {
          user_ids: screenNameMatch[1],
          access_token: process.env.VK_TOKEN,
          v: '5.131'
        }
      });
      
      if (response.data.response && response.data.response[0]) {
        return response.data.response[0].id;
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID:', error);
    }
  }
  
  return null;
}

// –°–µ—Ä–≤–∏—Å 1: VK.watch (—Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ –ø–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
async function getRegistrationDateFromVKWatch(userId) {
  try {
    const response = await axios.get(`https://vk.watch/user/${userId}`, {
      timeout: 10000,
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
        'Accept-Language': 'ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3'
      }
    });

    const $ = cheerio.load(response.data);
    
    // –ò—â–µ–º –¥–∞—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    const registrationText = $('*:contains("–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")').first().text();
    const dateMatch = registrationText.match(/(\d{2}\.\d{2}\.\d{4})/);
    
    if (dateMatch) {
      return dateMatch[1];
    }

    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫
    $('td, div, span').each((i, element) => {
      const text = $(element).text();
      if (text.includes('—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è') || text.includes('–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω')) {
        const dateMatch = text.match(/(\d{2}\.\d{2}\.\d{4})/);
        if (dateMatch) return dateMatch[1];
      }
    });

    return null;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ VK.watch:', error.message);
    return null;
  }
}

// –°–µ—Ä–≤–∏—Å 2: VK.com —á–µ—Ä–µ–∑ –ø–∞—Ä—Å–∏–Ω–≥ –º–æ–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏
async function getRegistrationDateFromMobile(userId) {
  try {
    const response = await axios.get(`https://m.vk.com/id${userId}`, {
      timeout: 10000,
      headers: {
        'User-Agent': 'Mozilla/5.0 (Linux; Android 10; Mobile) AppleWebKit/537.36',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'
      }
    });

    const $ = cheerio.load(response.data);
    const pageText = $('body').text();
    
    // –ò—â–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –¥–∞—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    const registrationMatch = pageText.match(/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏[^]*?(\d{1,2}\s+\w+\s+\d{4})/i);
    if (registrationMatch) {
      return registrationMatch[1];
    }

    return null;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –º–æ–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏:', error.message);
    return null;
  }
}

// –°–µ—Ä–≤–∏—Å 3: VKfox (–µ—Å–ª–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç)
async function getRegistrationDateFromVKFox(userId) {
  try {
    const response = await axios.get(`https://vkfox.ru/${userId}`, {
      timeout: 8000,
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
      }
    });

    const $ = cheerio.load(response.data);
    const regDate = $('*:contains("–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")').closest('tr').find('td').last().text().trim();
    
    if (regDate && regDate.length > 5) {
      return regDate;
    }

    return null;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ VKfox:', error.message);
    return null;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞—Ç—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
async function getRegistrationDate(userId) {
  console.log(`–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –¥–∞—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è ID: ${userId}`);
  
  // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏
  const services = [
    getRegistrationDateFromVKWatch,
    getRegistrationDateFromMobile,
    getRegistrationDateFromVKFox
  ];

  for (const service of services) {
    try {
      console.log(`–ü—Ä–æ–±—É–µ–º —Å–µ—Ä–≤–∏—Å: ${service.name}`);
      const result = await service(userId);
      if (result) {
        console.log(`–ù–∞–π–¥–µ–Ω–∞ –¥–∞—Ç–∞: ${result}`);
        return result;
      }
    } catch (error) {
      console.log(`–°–µ—Ä–≤–∏—Å ${service.name} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:`, error.message);
      continue;
    }
  }

  // –ï—Å–ª–∏ –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
  try {
    const response = await axios.get('https://api.vk.com/method/users.get', {
      params: {
        user_ids: userId,
        fields: 'bdate,photo_max,domain,last_seen',
        access_token: process.env.VK_TOKEN,
        v: '5.131'
      }
    });

    if (response.data.response && response.data.response[0]) {
      const user = response.data.response[0];
      return {
        bdate: user.bdate || '–ù–µ —É–∫–∞–∑–∞–Ω–∞',
        profile: `https://vk.com/${user.domain || 'id' + user.id}`,
        name: `${user.first_name} ${user.last_name}`,
        lastSeen: user.last_seen ? formatRegistrationDate(user.last_seen.time) : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
      };
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ API VK:', error.message);
  }

  return null;
}

module.exports = {
  command: '/reg',
  aliases: ['/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'],
  description: '–ü–æ–ª—É—á–∏—Ç—å –¥–∞—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
  async execute(context) {
    try {
      const senderRoleId = await getUserRole(context.peerId, context.senderId);
      let userId;
      
      if (senderRoleId < 20) {
        return context.reply(`‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã`);
      }
      
      if (context.replyMessage) {
        userId = context.replyMessage.senderId;
      } else {
        const parts = context.text.split(' ');
        userId = await extractNumericId(parts[1]);
      }
      
      if (!userId || userId < 0) {
        return context.send('‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      }

      const processingMsg = await context.send('üîç –ò—â—É –¥–∞—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...');
      
      const registrationInfo = await getRegistrationDate(userId);
      
      let message;
      
      if (typeof registrationInfo === 'string') {
        // –ù–∞–π–¥–µ–Ω–∞ –¥–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        message = `‚úÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ [id${userId}|–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]: ${registrationInfo}`;
      } else if (registrationInfo && typeof registrationInfo === 'object') {
        // –ü–æ–ª—É—á–µ–Ω–∞ –æ–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        message = `üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ [id${userId}|–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ]:\n`;
        message += `üìõ –ò–º—è: ${registrationInfo.name}\n`;
        message += `üéÇ –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è: ${registrationInfo.bdate}\n`;
        message += `üîó –ü—Ä–æ—Ñ–∏–ª—å: ${registrationInfo.profile}\n`;
        message += `‚è∞ –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –æ–Ω–ª–∞–π–Ω: ${registrationInfo.lastSeen}\n\n`;
        message += `‚ÑπÔ∏è –¢–æ—á–Ω–∞—è –¥–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞`;
      } else {
        message = '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ';
      }

      await context.editMessage({
        conversation_message_id: processingMsg.conversation_message_id,
        message: message
      });

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /reg:', error);
      context.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏');
    }
  },
};